<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(SolutionDir)\Composer.CompositeC1\bin\Debug\Orckestra.Composer.dll" #>
<#@ assembly name="$(SolutionDir)\Composer.CompositeC1.Mvc\bin\Orckestra.Composer.CompositeC1.Mvc.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Orckestra.Composer.ViewModels" #>

<#
	var iExtensionOfType = typeof(IExtensionOf<>);
    var extensionTypes =
        AppDomain.CurrentDomain
            .GetAssemblies()
            .SelectMany(a => a.GetTypes())
            .Select(
                t =>
                {
                    var typeInfo = new
                    {
                        ExtensionType = t,
                        ExtendedType =
                            t.GetInterfaces()
                                .Where(i => i.IsGenericType &&
                                            iExtensionOfType.IsAssignableFrom(i.GetGenericTypeDefinition()))
                                .Select(i => i.GetGenericArguments()[0])
                                .SingleOrDefault()
                    };
                    return typeInfo;
                })
            .Where(
                t =>
                    t.ExtensionType.IsInterface &&
                    !t.ExtensionType.IsGenericType &&
                    t.ExtendedType != null)
                    .ToList();

	var namespaces = extensionTypes
					.Select(t => t.ExtensionType.Namespace)
                    .Union(extensionTypes.Select(t => t.ExtendedType.Namespace));
#>


<# foreach(var namespaceToInclude in namespaces) { #>
	using <#= namespaceToInclude #>;
<#}#>

namespace Orckestra.Composer.CompositeC1.Mvc{
	public static class ViewModelExtensions
    {
    	<# foreach(var extensionType in extensionTypes) { #>
		public static <#= extensionType.ExtensionType.Name #> AsExtensionModel(this <#= extensionType.ExtendedType.Name #> @this)
        {
            return @this.AsExtensionModel<<#= extensionType.ExtensionType.Name #>>();
        }
		<#}#>
	}
}